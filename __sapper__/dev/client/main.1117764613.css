main.svelte-155xulc{height:100vh;width:100vw;display:grid;grid-template-areas:"nav nav" "sidebar main";grid-template-columns:16em 1fr;grid-template-rows:6em 1fr;overflow-x:hidden;position:relative;width:100%;background-color:transparent;margin:0;box-sizing:border-box}#slotContainer.svelte-155xulc{grid-area:main;width:100%;overflow-x:hidden;z-index:2;padding:1rem 2rem;background-color:white}
h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
a.svelte-dd66ao{background-color:#1db954;text-align:center;min-width:4em;max-width:8em;height:2em;color:white;padding:0.5em 1em;border-radius:0.5em}
.artist.svelte-1c4jo3m.svelte-1c4jo3m{width:100%;display:flex;flex-direction:column;gap:1em}.top.svelte-1c4jo3m.svelte-1c4jo3m{height:16rem;width:100%;display:flex;align-items:flex-end;gap:1rem}.top.svelte-1c4jo3m>h1.svelte-1c4jo3m{margin:0;font-size:3rem}.top.svelte-1c4jo3m>img.svelte-1c4jo3m{height:100%}
#info.svelte-wxh8sc.svelte-wxh8sc{width:100%;height:20em;display:grid;grid-template-areas:"albumcover text";grid-template-columns:20em 1fr;grid-template-rows:1fr}#info.svelte-wxh8sc>img.svelte-wxh8sc{grid-area:albumcover;margin:5% 0;height:90%;border:1px solid gray}#text.svelte-wxh8sc.svelte-wxh8sc{display:flex;justify-content:center;flex-direction:column}
nav.svelte-7lqgne{grid-area:nav;font-weight:300;padding:0 1em;border-bottom:1px solid gray}ul.svelte-7lqgne{margin:0;padding:0;width:100%;height:100%;display:flex;align-items:center;gap:1rem}ul.svelte-7lqgne::after{content:"";display:block;clear:both}li.svelte-7lqgne{display:block;float:left}[aria-current].svelte-7lqgne{position:relative;display:inline-block}[aria-current].svelte-7lqgne::after{position:absolute;content:"";width:calc(100% - 1em);height:2px;background-color:rgb(255, 62, 0);display:block;bottom:-1px}a.svelte-7lqgne{text-decoration:none;padding:1em 0.5em;display:block}
nav.svelte-15ofjsi{border-right:1px solid gray;width:100%;padding:1rem 0}
h1.svelte-rhnqca.svelte-rhnqca{background-color:transparent;z-index:2}.items.svelte-rhnqca.svelte-rhnqca{width:100%;overflow-x:scroll;overflow-y:visible;display:flex;flex-direction:row;justify-content:start;align-items:flex-start}.items.svelte-rhnqca>.svelte-rhnqca:nth-last-child(2){margin-right:var(--margin)}footer.svelte-rhnqca.svelte-rhnqca{height:8em;width:100%}
#trackListing.svelte-cmjzs8{width:100%;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;text-decoration:none}
p.svelte-1um2yp2{width:100%}
.item.svelte-10vlhgr.svelte-10vlhgr{width:var(--width);height:calc(var(--width) + 6rem);display:flex;flex-direction:column;justify-content:space-evenly;align-items:flex-start;margin-left:var(--margin)}.gray-background.svelte-10vlhgr.svelte-10vlhgr{width:100%;height:100%;z-index:3;position:absolute;top:0;left:0;background-color:rgba(0, 0, 0, 0);transition:background-color 0.2s}.item-cover-container.svelte-10vlhgr:hover .gray-background.svelte-10vlhgr{background-color:rgba(0, 0, 0, 0.5)}.item-cover-container.svelte-10vlhgr.svelte-10vlhgr,.item-cover.svelte-10vlhgr.svelte-10vlhgr{width:var(--width);height:var(--width);transition:box-shadow 0.1s;position:relative}.item-cover.svelte-10vlhgr.svelte-10vlhgr{object-fit:cover;z-index:2;border:1px solid rgb(126, 126, 126)}.name.svelte-10vlhgr.svelte-10vlhgr:hover,.item-cover-container.svelte-10vlhgr.svelte-10vlhgr:hover{text-decoration:underline;cursor:pointer}.svelte-10vlhgr.svelte-10vlhgr:last-of-type{margin-right:var(--margin)}
.track.svelte-17yof9z.svelte-17yof9z{width:100%;height:3em;display:grid;grid-template-areas:"left right";grid-template-columns:auto 16em;grid-gap:1em;align-items:center}.track.svelte-17yof9z:not(.cover) .left.svelte-17yof9z{padding-left:1em}.cover.svelte-17yof9z.svelte-17yof9z{grid-template-areas:"cover left right";grid-template-columns:3em auto 16em}.track.svelte-17yof9z>.svelte-17yof9z{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.left.svelte-17yof9z.svelte-17yof9z,.right.svelte-17yof9z.svelte-17yof9z{display:flex;align-items:center;gap:1rem}.left.svelte-17yof9z.svelte-17yof9z{grid-area:left;justify-content:flex-start}.right.svelte-17yof9z.svelte-17yof9z{grid-area:right;justify-content:flex-end;padding-right:1em}.track-cover.svelte-17yof9z.svelte-17yof9z{height:100%;width:100%}a.svelte-17yof9z.svelte-17yof9z{text-decoration:none}a.svelte-17yof9z.svelte-17yof9z:hover{text-decoration:underline}
a.svelte-y49154{color:inherit;text-decoration:none;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;grid-area:artist;margin:0}a.svelte-y49154:hover{text-decoration:underline}
a.svelte-yra2we{width:100%;text-transform:capitalize;text-decoration:none;padding:0 1rem}
h3.svelte-1xtew7b{padding:0 1rem}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */